   1              	# 1 "Startup.S"
   1              	@/*****************************************************************************
   0              	
   0              	
   2              	@*   startup.s: startup file for NXP LPC230x Family Microprocessors
   3              	@*
   4              	@*   Copyright(C) 2006, NXP Semiconductor
   5              	@*   All rights reserved.
   6              	@*
   7              	@*   History
   8              	@*   2006.09.01  ver 1.00    Prelimnary version, first Release
   9              	@*
  10              	@*****************************************************************************/
  11              	
  12              	@ modified by Martin Thomas:
  13              	@  - changed comment char to @ for GNU assembler (arm-elf-as)
  14              	@    "The line comment character is [...] ‘@’ on the ARM [...]"
  15              	@    (GNU-as manual from binutils V 2.17)
  16              	@  - ported RV-ASM to GNU-ASM (sections, import/export, equ, 
  17              	@    :OR:, Labels etc.)
  18              	@  - added .data and .bss inits
  19              	@  - call main instead of __main (since there is no "RV runtime-init")
  20              	@  - call main with bx so it can be thumb-code
  21              	@  - added IRQ-Wrapper for easier porting of ISR-codes for IAR, RV etc.
  22              	@  - TargetResetInit can be a thumb-function (using BX instead of BL)
  23              	@  - moved TargetResetInit call before the stack-inits and use 
  24              	@    a temporary stack-pointer
  25              	@  - route swi-exception to handler implemented in swi_handler.h
  26              	
  27              	@@	PRESERVE8
  28              	
  29              	@/*
  30              	@ *  The STARTUP.S code is executed after CPU Reset. This file may be 
  31              	@ *  translated with the following SET symbols. In uVision these SET 
  32              	@ *  symbols are entered under Options - ASM - Define.
  33              	@ *
  34              	@ *  REMAP: when set the startup code initializes the register MEMMAP 
  35              	@ *  which overwrites the settings of the CPU configuration pins. The 
  36              	@ *  startup and interrupt vectors are remapped from:
  37              	@ *     0x00000000  default setting (not remapped)
  38              	@ *     0x40000000  when RAM_MODE is used
  39              	@ *
  40              	@ *  RAM_MODE: when set the device is configured for code execution
  41              	@ *  from on-chip RAM starting at address 0x40000000. 
  42              	@ */
  43              	
  44              	
  45              	@ Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs
  46              	
  47              	.equ Mode_USR,            0x10
  48              	.equ Mode_FIQ,            0x11
  49              	.equ Mode_IRQ,            0x12
  50              	.equ Mode_SVC,            0x13
  51              	.equ Mode_ABT,            0x17
  52              	.equ Mode_UND,            0x1B
  53              	.equ Mode_SYS,            0x1F
  54              	
  55              	.equ I_Bit,               0x80            @ when I bit is set, IRQ is disabled
  56              	.equ F_Bit,               0x40            @ when F bit is set, FIQ is disabled
  57              	
  58              	
  59              	@// <h> Stack Configuration (Stack Sizes in Bytes)
  60              	@//   <o0> Undefined Mode      <0x0-0xFFFFFFFF:8>
  61              	@//   <o1> Supervisor Mode     <0x0-0xFFFFFFFF:8>
  62              	@//   <o2> Abort Mode          <0x0-0xFFFFFFFF:8>
  63              	@//   <o3> Fast Interrupt Mode <0x0-0xFFFFFFFF:8>
  64              	@//   <o4> Interrupt Mode      <0x0-0xFFFFFFFF:8>
  65              	@//   <o5> User/System Mode    <0x0-0xFFFFFFFF:8>
  66              	@// </h>
  67              	
  68              	.equ UND_Stack_Size,     0x00000000
  69              	.equ SVC_Stack_Size,     0x00000100
  70              	.equ ABT_Stack_Size,     0x00000000
  71              	.equ FIQ_Stack_Size,     0x00000000
  72              	.equ IRQ_Stack_Size,     0x00000100
  73              	.equ USR_Stack_Size,     0x00000200
  74              	
  75              	.equ Stack_Size,        (UND_Stack_Size + SVC_Stack_Size + ABT_Stack_Size + \
  76              	                         FIQ_Stack_Size + IRQ_Stack_Size + USR_Stack_Size)
  77              	
  78              	@@                AREA    STACK, NOINIT, READWRITE, ALIGN=3
  79              	@@
  80              	@@Stack_Mem       SPACE   Stack_Size
  81              	@@Stack_Top       EQU     Stack_Mem + Stack_Size
  82              	
  83              	.arm
  84              	.section .STACK, "w"
  85              	.align 3
  86              	Stack_Mem:
  87 0000 00000000 	.space Stack_Size
  87      00000000 
  87      00000000 
  87      00000000 
  87      00000000 
  88              	.equ Stack_Top, Stack_Mem + Stack_Size
  89              	
  90              	
  91              	@// <h> Heap Configuration
  92              	@//   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF>
  93              	@// </h>
  94              	
  95              	@@Heap_Size       EQU     0x00000000
  96              	@@                AREA    HEAP, NOINIT, READWRITE, ALIGN=3
  97              	@@Heap_Mem        SPACE   Heap_Size
  98              	
  99              	.equ Heap_Size,   0x00000000
 100              	.section .HEAP, "w"
 101              	.align 3
 102              	HeapMem:
 103              	.if (Heap_Size>0)
 104              	.space Heap_Size
 105              	.endif
 106              	
 107              	
 108              	@ Area Definition and Entry Point
 109              	@  Startup Code must be linked first at Address at which it expects to run.
 110              	
 111              	@@                AREA    RESET, CODE, READONLY
 112              	@@                ARM
 113              	.section .RESET, "ax"
 114              	.arm
 115              	
 116              	@ Exception Vectors
 117              	@  Mapped to Address 0.
 118              	@  Absolute addressing mode must be used.
 119              	@  Dummy Handlers are implemented as infinite loops which can be modified.
 120              	
 121 0000 18F09FE5 	Vectors:        LDR     PC, Reset_Addr         
 122 0004 18F09FE5 	                LDR     PC, Undef_Addr
 123 0008 18F09FE5 	                LDR     PC, SWI_Addr
 124 000c 18F09FE5 	                LDR     PC, PAbt_Addr
 125 0010 18F09FE5 	                LDR     PC, DAbt_Addr
 126 0014 0000A0E1 	                NOP                            @ Reserved Vector 
 127 0018 18F09FE5 	                LDR     PC, IRQ_Addr
 128              	@@                LDR     PC, [PC, #-0x0120]     @ Vector from VicVectAddr
 129 001c 18F09FE5 	                LDR     PC, FIQ_Addr
 130              	
 131 0020 54000000 	Reset_Addr:      .word     Reset_Handler
 132 0024 40000000 	Undef_Addr:      .word     Undef_Handler
 133 0028 44000000 	SWI_Addr:        .word     SWI_Handler
 134 002c 48000000 	PAbt_Addr:       .word     PAbt_Handler
 135 0030 4C000000 	DAbt_Addr:       .word     DAbt_Handler
 136 0034 286E20B9 	                 .word     0xB9206E28             @ Reserved Address 
 137 0038 FC000000 	IRQ_Addr:        .word     IRQ_Handler
 138 003c 50000000 	FIQ_Addr:        .word     FIQ_Handler
 139              	
 140 0040 FEFFFFEA 	Undef_Handler:   B       Undef_Handler
 141              	@@ SWI_Handler:     B       SWI_Handler
 142              	.extern SoftwareInterrupt
 143 0044 FEFFFFEA 	SWI_Handler:     B       SoftwareInterrupt  @ see swi_handler.S
 144 0048 FEFFFFEA 	PAbt_Handler:    B       PAbt_Handler
 145 004c FEFFFFEA 	DAbt_Handler:    B       DAbt_Handler
 146              	@@ handled thru assembler wrapper (see below)
 147              	@@ IRQ_Handler:    B       IRQ_Handler
 148 0050 FEFFFFEA 	FIQ_Handler:     B       FIQ_Handler
 149              	
 150              	
 151              	@ Reset Handler
 152              	@                EXPORT  Reset_Handler
 153              	.global Reset_handler
 154              	Reset_Handler:
 155              	
 156              	@  Call low-level init C-function
 157              	@                IMPORT TargetResetInit
 158              	@                BL   TargetResetInit
 159              	
 160              	                 .extern TargetResetInit
 161 0054 E4D09FE5 	                 ldr     SP, =Stack_Top    @ temporary stack at Stack_Top
 162 0058 E4009FE5 	                 LDR R0, =TargetResetInit
 163 005c 0FE0A0E1 	                 MOV LR, PC
 164 0060 10FF2FE1 	                 BX R0
 165              	
 166              	
 167              	@  Setup Stack for each mode
 168 0064 D4009FE5 	                LDR     R0, =Stack_Top
 169              	
 170              	@  Enter Undefined Instruction Mode and set its Stack Pointer
 171 0068 DBF021E3 	                MSR     CPSR_c, #Mode_UND | I_Bit | F_Bit
 172 006c 00D0A0E1 	                MOV     SP, R0
 173 0070 000040E2 	                SUB     R0, R0, #UND_Stack_Size
 174              	
 175              	@  Enter Abort Mode and set its Stack Pointer
 176 0074 D7F021E3 	                MSR     CPSR_c, #Mode_ABT | I_Bit | F_Bit
 177 0078 00D0A0E1 	                MOV     SP, R0
 178 007c 000040E2 	                SUB     R0, R0, #ABT_Stack_Size
 179              	
 180              	@  Enter FIQ Mode and set its Stack Pointer
 181 0080 D1F021E3 	                MSR     CPSR_c, #Mode_FIQ | I_Bit | F_Bit
 182 0084 00D0A0E1 	                MOV     SP, R0
 183 0088 000040E2 	                SUB     R0, R0, #FIQ_Stack_Size
 184              	
 185              	@  Enter IRQ Mode and set its Stack Pointer
 186 008c D2F021E3 	                MSR     CPSR_c, #Mode_IRQ | I_Bit | F_Bit
 187 0090 00D0A0E1 	                MOV     SP, R0
 188 0094 010C40E2 	                SUB     R0, R0, #IRQ_Stack_Size
 189              	
 190              	@  Enter Supervisor Mode and set its Stack Pointer
 191 0098 D3F021E3 	                MSR     CPSR_c, #Mode_SVC | I_Bit | F_Bit
 192 009c 00D0A0E1 	                MOV     SP, R0
 193 00a0 010C40E2 	                SUB     R0, R0, #SVC_Stack_Size
 194              	
 195              	@  Enter User Mode and set its Stack Pointer
 196              	@  mt:          MSR     CPSR_c, #Mode_USR
 197 00a4 90F021E3 	                MSR     CPSR_c, #Mode_USR | I_Bit
 198 00a8 00D0A0E1 	                MOV     SP, R0
 199 00ac 02AC4DE2 	                SUB     SL, SP, #USR_Stack_Size
 200              	@  mt: Start application in USR-mode with IRQ-exceptions disabled.
 201              	@  They can be enabled at runtime thru IntEnable in swi.h/swi_handler.S.
 202              	
 203              	@  Relocate .data section (Copy from ROM to RAM)
 204 00b0 90109FE5 	                LDR     R1, =_etext 
 205 00b4 90209FE5 	                LDR     R2, =_data 
 206 00b8 90309FE5 	                LDR     R3, =_edata 
 207 00bc 030052E1 	                CMP     R2, R3
 208 00c0 0300000A 	                BEQ     DataIsEmpty
 209 00c4 030052E1 	LoopRel:        CMP     R2, R3 
 210 00c8 04009134 	                LDRLO   R0, [R1], #4 
 211 00cc 04008234 	                STRLO   R0, [R2], #4 
 212 00d0 FBFFFF3A 	                BLO     LoopRel 
 213              	DataIsEmpty:
 214              	 
 215              	@  Clear .bss section (Zero init)
 216 00d4 0000A0E3 	                MOV     R0, #0 
 217 00d8 74109FE5 	                LDR     R1, =__bss_start__ 
 218 00dc 74209FE5 	                LDR     R2, =__bss_end__ 
 219 00e0 020051E1 	                CMP     R1,R2
 220 00e4 0200000A 	                BEQ     BSSIsEmpty
 221 00e8 020051E1 	LoopZI:         CMP     R1, R2 
 222 00ec 04008134 	                STRLO   R0, [R1], #4 
 223 00f0 FCFFFF3A 	                BLO     LoopZI 
 224              	BSSIsEmpty:
 225              	
 226              	
 227              	@  Enter the C code
 228              	@                IMPORT  __main
 229              	@                LDR     R0, =__main
 230              	                .extern main
 231 00f4 60009FE5 	                LDR R0, =main
 232 00f8 10FF2FE1 	                BX      R0
 233              	
 234              	
 235              	@ User Initial Stack & Heap (not used in GNU port)
 236              	@@                AREA    |.text|, CODE, READONLY
 237              	
 238              	@@                IMPORT  __use_two_region_memory
 239              	@@                EXPORT  __user_initial_stackheap
 240              	@@__user_initial_stackheap
 241              	
 242              	@@                LDR     R0, =  Heap_Mem
 243              	@@                LDR     R1, =(Stack_Mem + USR_Stack_Size)
 244              	@@                LDR     R2, = (Heap_Mem +      Heap_Size)
 245              	@@                LDR     R3, = Stack_Mem
 246              	@@                BX      LR
 247              	
 248              	
 249              	@@ IRQ_Wrapper based on Examples for
 250              	@@ AT91-ARM7TDMI AIC from Atmel,
 251              	@@ adapted to LPC23xx/24xx VIC by M. Thomas
 252              	@@ This wrapper avoids compiler-dependencies.
 253              	
 254              	.set LPC_BASE_VIC, 0xFFFFF000
 255              	.set VIC_VectAddr, 0xF00
 256              	
 257              	.arm
 258              	IRQ_Handler:
 259              	
 260              	@- Manage Exception Entry
 261              	@- Adjust and save LR_irq in IRQ stack
 262 00fc 04E04EE2 	            sub         lr, lr, #4
 263 0100 00402DE9 	            stmfd       sp!, {lr}
 264              	
 265              	@- Save SPSR need to be saved for nested interrupt
 266 0104 00E04FE1 	            mrs         r14, SPSR
 267 0108 00402DE9 	            stmfd       sp!, {r14}
 268              	
 269              	@- Save and r0 in IRQ stack
 270 010c 01002DE9 	            stmfd       sp!, {r0}
 271              	
 272              	@- Load the ISR-Address from VICVectAddr
 273 0110 48E09FE5 	            ldr         r14, =LPC_BASE_VIC
 274 0114 000F9EE5 	            ldr         r0 , [r14, #VIC_VectAddr]
 275              	
 276              	@- Enable Interrupt and Switch in Supervisor Mode
 277 0118 13F021E3 	           msr         CPSR_c, #Mode_SVC
 278              	
 279              	@- Save scratch/used registers and LR in User Stack
 280 011c 0E502DE9 	            stmfd       sp!, { r1-r3, r12, r14 }
 281              	
 282              	@- Branch to the routine pointed by the VIC_VectAddr
 283 0120 0FE0A0E1 	            mov         r14, pc
 284 0124 10FF2FE1 	            bx          r0
 285              	
 286              	@- Restore scratch/used registers and LR from User Stack
 287 0128 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, r14 }
 288              	
 289              	@- Disable Interrupt and switch back in IRQ mode
 290 012c 92F021E3 	            msr         CPSR_c, #I_Bit | Mode_IRQ
 291              	
 292              	@-  Mark the End of Interrupt on the VIC
 293              	@   by writing to VICVectAddr - not needed 
 294              	@   here since already done in the ISRs
 295              	@@           ldr         r14, =LPC_BASE_VIC
 296              	@@           str         r14, [r14, #VIC_VectAddr]
 297              	
 298              	@- Restore R0
 299 0130 0100BDE8 	            ldmia       sp!, {r0}
 300              	
 301              	@- Restore SPSR_irq and r0 from IRQ stack
 302 0134 0040BDE8 	            ldmia       sp!, {r14}
 303 0138 0EF06FE1 	            msr         SPSR_cxsf, r14
 304              	
 305              	@- Restore adjusted  LR_irq from IRQ stack directly in the PC
 306 013c 0080FDE8 	            ldmia       sp!, {pc}^
 307              	
 308              	
 309              	@                END
 310 0140 00040000 	.end
 310      00000000 
 310      00000000 
 310      00000000 
 310      00000000 
DEFINED SYMBOLS
           Startup.S:47     *ABS*:0000000000000010 Mode_USR
           Startup.S:48     *ABS*:0000000000000011 Mode_FIQ
           Startup.S:49     *ABS*:0000000000000012 Mode_IRQ
           Startup.S:50     *ABS*:0000000000000013 Mode_SVC
           Startup.S:51     *ABS*:0000000000000017 Mode_ABT
           Startup.S:52     *ABS*:000000000000001b Mode_UND
           Startup.S:53     *ABS*:000000000000001f Mode_SYS
           Startup.S:55     *ABS*:0000000000000080 I_Bit
           Startup.S:56     *ABS*:0000000000000040 F_Bit
           Startup.S:68     *ABS*:0000000000000000 UND_Stack_Size
           Startup.S:69     *ABS*:0000000000000100 SVC_Stack_Size
           Startup.S:70     *ABS*:0000000000000000 ABT_Stack_Size
           Startup.S:71     *ABS*:0000000000000000 FIQ_Stack_Size
           Startup.S:72     *ABS*:0000000000000100 IRQ_Stack_Size
           Startup.S:73     *ABS*:0000000000000200 USR_Stack_Size
           Startup.S:75     *ABS*:0000000000000400 Stack_Size
           Startup.S:85     .STACK:0000000000000000 $d
           Startup.S:86     .STACK:0000000000000000 Stack_Mem
           Startup.S:86     .STACK:0000000000000400 Stack_Top
           Startup.S:99     *ABS*:0000000000000000 Heap_Size
           Startup.S:102    .HEAP:0000000000000000 HeapMem
           Startup.S:121    .RESET:0000000000000000 Vectors
           Startup.S:131    .RESET:0000000000000020 Reset_Addr
           Startup.S:121    .RESET:0000000000000000 $a
           Startup.S:132    .RESET:0000000000000024 Undef_Addr
           Startup.S:133    .RESET:0000000000000028 SWI_Addr
           Startup.S:134    .RESET:000000000000002c PAbt_Addr
           Startup.S:135    .RESET:0000000000000030 DAbt_Addr
           Startup.S:137    .RESET:0000000000000038 IRQ_Addr
           Startup.S:138    .RESET:000000000000003c FIQ_Addr
           Startup.S:131    .RESET:0000000000000020 $d
           Startup.S:154    .RESET:0000000000000054 Reset_Handler
           Startup.S:140    .RESET:0000000000000040 Undef_Handler
           Startup.S:143    .RESET:0000000000000044 SWI_Handler
           Startup.S:144    .RESET:0000000000000048 PAbt_Handler
           Startup.S:145    .RESET:000000000000004c DAbt_Handler
           Startup.S:258    .RESET:00000000000000fc IRQ_Handler
           Startup.S:148    .RESET:0000000000000050 FIQ_Handler
           Startup.S:140    .RESET:0000000000000040 $a
           Startup.S:213    .RESET:00000000000000d4 DataIsEmpty
           Startup.S:209    .RESET:00000000000000c4 LoopRel
           Startup.S:224    .RESET:00000000000000f4 BSSIsEmpty
           Startup.S:221    .RESET:00000000000000e8 LoopZI
           Startup.S:254    *ABS*:00000000fffff000 LPC_BASE_VIC
           Startup.S:255    *ABS*:0000000000000f00 VIC_VectAddr
           Startup.S:310    .RESET:0000000000000140 $d
                   .debug_aranges:000000000000000c $d

UNDEFINED SYMBOLS
SoftwareInterrupt
Reset_handler
TargetResetInit
_etext
_data
_edata
__bss_start__
__bss_end__
main
